apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cloud-operator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "cloud-operator.name" . }}
    chart: {{ include "cloud-operator.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "cloud-operator.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "cloud-operator.name" . }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 65532
      priorityClassName: {{ .Values.priorityClassName }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ .name }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            runAsGroup: 65532
            capabilities:
              drop:
                - ALL
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 8080
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: CLUSTER_CREDS_SECRET
              value: "clustercreds"
            - name: ONBOARDING_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: onboardingcreds
                  key: "client_id"
            - name: ONBOARDING_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: onboardingcreds
                  key: "client_secret"
            - name: ONBOARDING_ENDPOINT
              value: "{{ .Values.env.onboardingEndpoint }}"
            - name: TOKEN_ENDPOINT
              value: "{{ .Values.env.tokenEndpoint }}"
            - name: TLS_SKIP_VERIFY
              value: "{{ .Values.env.tlsSkipVerify }}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: falco
          image: docker.io/falcosecurity/falco-no-driver:0.39.1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
          args:
            - /usr/bin/falco        
            - --cri
            - /var/run/docker.sock
            - --cri
            - /run/containerd/containerd.sock
            - --cri
            - /run/crio/crio.sock
            - -pk
          env:
            - name: HOST_ROOT
              value: /host
            - name: FALCO_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: FALCO_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          tty: false
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 15
            httpGet:
              path: /healthz
              port: 8765
          readinessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
            httpGet:
              path: /healthz
              port: 8765
          volumeMounts:
            - mountPath: /etc/falco
              name: rulesfiles-install-dir
            - mountPath: /etc/falco/config.d
              name: specialized-falco-configs
            - mountPath: /root/.falco
              name: root-falco-fs
            - mountPath: /host/proc
              name: proc-fs
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /host/dev
              name: dev-fs
              readOnly: true
            - name: sys-fs
              mountPath: /sys/module
            - mountPath: /host/var/run/
              name: docker-socket
            - mountPath: /host/run/containerd/
              name: containerd-socket
            - mountPath: /host/run/crio/
              name: crio-socket
            - mountPath: /etc/falco/falco.yaml
              name: falco-yaml
              subPath: falco.yaml
            - mountPath: /etc/falco/falco_rules.yaml
              name: falco-rules-yaml
              subPath: falco_rules.yaml
      volumes:
        - name: specialized-falco-configs
          emptyDir: {}
        - name: rulesfiles-install-dir
          emptyDir: {}
        - name: root-falco-fs
          emptyDir: {}  
        - name: etc-fs
          hostPath:
            path: /etc
        - name: dev-fs
          hostPath:
            path: /dev
        - name: sys-fs
          hostPath:
            path: /sys/module
        - name: docker-socket
          hostPath:
            path: /var/run
        - name: containerd-socket
          hostPath:
            path: /run/containerd
        - name: crio-socket
          hostPath:
            path: /run/crio
        - name: proc-fs
          hostPath:
            path: /proc
        - name: falco-yaml
          configMap:
            name: falco
            items:
            - key: falco.yaml
              path: falco.yaml
        - name: falco-rules-yaml
          configMap:
            name: falco-rules
            items:
            - key: falco_rules.yaml
              path: falco_rules.yaml
        
              
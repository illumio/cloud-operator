// Copyright 2024 Illumio, Inc. All Rights Reserved.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: illumio/cloud/k8sclustersync/v1/k8s_info.proto

package k8sclustersyncv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KubernetesInfoService_SendKubernetesResources_FullMethodName    = "/illumio.cloud.k8sclustersync.v1.KubernetesInfoService/SendKubernetesResources"
	KubernetesInfoService_SendKubernetesNetworkFlows_FullMethodName = "/illumio.cloud.k8sclustersync.v1.KubernetesInfoService/SendKubernetesNetworkFlows"
	KubernetesInfoService_SendLogs_FullMethodName                   = "/illumio.cloud.k8sclustersync.v1.KubernetesInfoService/SendLogs"
	KubernetesInfoService_GetConfigurationUpdates_FullMethodName    = "/illumio.cloud.k8sclustersync.v1.KubernetesInfoService/GetConfigurationUpdates"
)

// KubernetesInfoServiceClient is the client API for KubernetesInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
type KubernetesInfoServiceClient interface {
	// Continuously syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
	SendKubernetesResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse], error)
	// Continuously sends network flows exported by the CNI plugin in the cluster to CloudSecure.
	SendKubernetesNetworkFlows(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse], error)
	// Continuously syncs logs from operator and cluster.
	SendLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendLogsRequest, SendLogsResponse], error)
	// Continuously receives configuration updates from CloudSecure.
	GetConfigurationUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse], error)
}

type kubernetesInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesInfoServiceClient(cc grpc.ClientConnInterface) KubernetesInfoServiceClient {
	return &kubernetesInfoServiceClient{cc}
}

func (c *kubernetesInfoServiceClient) SendKubernetesResources(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[0], KubernetesInfoService_SendKubernetesResources_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendKubernetesResourcesClient = grpc.BidiStreamingClient[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]

func (c *kubernetesInfoServiceClient) SendKubernetesNetworkFlows(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[1], KubernetesInfoService_SendKubernetesNetworkFlows_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendKubernetesNetworkFlowsClient = grpc.BidiStreamingClient[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]

func (c *kubernetesInfoServiceClient) SendLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendLogsRequest, SendLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[2], KubernetesInfoService_SendLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendLogsRequest, SendLogsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendLogsClient = grpc.BidiStreamingClient[SendLogsRequest, SendLogsResponse]

func (c *kubernetesInfoServiceClient) GetConfigurationUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[3], KubernetesInfoService_GetConfigurationUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_GetConfigurationUpdatesClient = grpc.BidiStreamingClient[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]

// KubernetesInfoServiceServer is the server API for KubernetesInfoService service.
// All implementations must embed UnimplementedKubernetesInfoServiceServer
// for forward compatibility.
//
// Syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
type KubernetesInfoServiceServer interface {
	// Continuously syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
	SendKubernetesResources(grpc.BidiStreamingServer[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]) error
	// Continuously sends network flows exported by the CNI plugin in the cluster to CloudSecure.
	SendKubernetesNetworkFlows(grpc.BidiStreamingServer[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]) error
	// Continuously syncs logs from operator and cluster.
	SendLogs(grpc.BidiStreamingServer[SendLogsRequest, SendLogsResponse]) error
	// Continuously receives configuration updates from CloudSecure.
	GetConfigurationUpdates(grpc.BidiStreamingServer[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]) error
	mustEmbedUnimplementedKubernetesInfoServiceServer()
}

// UnimplementedKubernetesInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKubernetesInfoServiceServer struct{}

func (UnimplementedKubernetesInfoServiceServer) SendKubernetesResources(grpc.BidiStreamingServer[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendKubernetesResources not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) SendKubernetesNetworkFlows(grpc.BidiStreamingServer[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendKubernetesNetworkFlows not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) SendLogs(grpc.BidiStreamingServer[SendLogsRequest, SendLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendLogs not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) GetConfigurationUpdates(grpc.BidiStreamingServer[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigurationUpdates not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) mustEmbedUnimplementedKubernetesInfoServiceServer() {}
func (UnimplementedKubernetesInfoServiceServer) testEmbeddedByValue()                               {}

// UnsafeKubernetesInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesInfoServiceServer will
// result in compilation errors.
type UnsafeKubernetesInfoServiceServer interface {
	mustEmbedUnimplementedKubernetesInfoServiceServer()
}

func RegisterKubernetesInfoServiceServer(s grpc.ServiceRegistrar, srv KubernetesInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedKubernetesInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KubernetesInfoService_ServiceDesc, srv)
}

func _KubernetesInfoService_SendKubernetesResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).SendKubernetesResources(&grpc.GenericServerStream[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendKubernetesResourcesServer = grpc.BidiStreamingServer[SendKubernetesResourcesRequest, SendKubernetesResourcesResponse]

func _KubernetesInfoService_SendKubernetesNetworkFlows_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).SendKubernetesNetworkFlows(&grpc.GenericServerStream[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendKubernetesNetworkFlowsServer = grpc.BidiStreamingServer[SendKubernetesNetworkFlowsRequest, SendKubernetesNetworkFlowsResponse]

func _KubernetesInfoService_SendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).SendLogs(&grpc.GenericServerStream[SendLogsRequest, SendLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_SendLogsServer = grpc.BidiStreamingServer[SendLogsRequest, SendLogsResponse]

func _KubernetesInfoService_GetConfigurationUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).GetConfigurationUpdates(&grpc.GenericServerStream[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KubernetesInfoService_GetConfigurationUpdatesServer = grpc.BidiStreamingServer[GetConfigurationUpdatesRequest, GetConfigurationUpdatesResponse]

// KubernetesInfoService_ServiceDesc is the grpc.ServiceDesc for KubernetesInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "illumio.cloud.k8sclustersync.v1.KubernetesInfoService",
	HandlerType: (*KubernetesInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendKubernetesResources",
			Handler:       _KubernetesInfoService_SendKubernetesResources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendKubernetesNetworkFlows",
			Handler:       _KubernetesInfoService_SendKubernetesNetworkFlows_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendLogs",
			Handler:       _KubernetesInfoService_SendLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetConfigurationUpdates",
			Handler:       _KubernetesInfoService_GetConfigurationUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "illumio/cloud/k8sclustersync/v1/k8s_info.proto",
}

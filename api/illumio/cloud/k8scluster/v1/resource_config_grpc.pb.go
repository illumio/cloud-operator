// Copyright 2024 Illumio, Inc. All Rights Reserved.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: illumio/cloud/k8scluster/v1/resource_config.proto

package k8sclusterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KubernetesInfoService_SendKubernetesResources_FullMethodName    = "/illumio.cloud.k8scluster.v1.KubernetesInfoService/SendKubernetesResources"
	KubernetesInfoService_SendKubernetesNetworkFlows_FullMethodName = "/illumio.cloud.k8scluster.v1.KubernetesInfoService/SendKubernetesNetworkFlows"
)

// KubernetesInfoServiceClient is the client API for KubernetesInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesInfoServiceClient interface {
	// Continuously syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
	SendKubernetesResources(ctx context.Context, opts ...grpc.CallOption) (KubernetesInfoService_SendKubernetesResourcesClient, error)
	// Continuously sends Network Flow traffic recorded via CNI in the cluster into CloudSecure.
	SendKubernetesNetworkFlows(ctx context.Context, opts ...grpc.CallOption) (KubernetesInfoService_SendKubernetesNetworkFlowsClient, error)
}

type kubernetesInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesInfoServiceClient(cc grpc.ClientConnInterface) KubernetesInfoServiceClient {
	return &kubernetesInfoServiceClient{cc}
}

func (c *kubernetesInfoServiceClient) SendKubernetesResources(ctx context.Context, opts ...grpc.CallOption) (KubernetesInfoService_SendKubernetesResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[0], KubernetesInfoService_SendKubernetesResources_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesInfoServiceSendKubernetesResourcesClient{stream}
	return x, nil
}

type KubernetesInfoService_SendKubernetesResourcesClient interface {
	Send(*SendKubernetesResourcesRequest) error
	Recv() (*SendKubernetesResourcesResponse, error)
	grpc.ClientStream
}

type kubernetesInfoServiceSendKubernetesResourcesClient struct {
	grpc.ClientStream
}

func (x *kubernetesInfoServiceSendKubernetesResourcesClient) Send(m *SendKubernetesResourcesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kubernetesInfoServiceSendKubernetesResourcesClient) Recv() (*SendKubernetesResourcesResponse, error) {
	m := new(SendKubernetesResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kubernetesInfoServiceClient) SendKubernetesNetworkFlows(ctx context.Context, opts ...grpc.CallOption) (KubernetesInfoService_SendKubernetesNetworkFlowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KubernetesInfoService_ServiceDesc.Streams[1], KubernetesInfoService_SendKubernetesNetworkFlows_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &kubernetesInfoServiceSendKubernetesNetworkFlowsClient{stream}
	return x, nil
}

type KubernetesInfoService_SendKubernetesNetworkFlowsClient interface {
	Send(*SendKubernetesNetworkFlowsRequest) error
	Recv() (*SendKubernetesNetworkFlowsResponse, error)
	grpc.ClientStream
}

type kubernetesInfoServiceSendKubernetesNetworkFlowsClient struct {
	grpc.ClientStream
}

func (x *kubernetesInfoServiceSendKubernetesNetworkFlowsClient) Send(m *SendKubernetesNetworkFlowsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kubernetesInfoServiceSendKubernetesNetworkFlowsClient) Recv() (*SendKubernetesNetworkFlowsResponse, error) {
	m := new(SendKubernetesNetworkFlowsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesInfoServiceServer is the server API for KubernetesInfoService service.
// All implementations must embed UnimplementedKubernetesInfoServiceServer
// for forward compatibility
type KubernetesInfoServiceServer interface {
	// Continuously syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
	SendKubernetesResources(KubernetesInfoService_SendKubernetesResourcesServer) error
	// Continuously sends Network Flow traffic recorded via CNI in the cluster into CloudSecure.
	SendKubernetesNetworkFlows(KubernetesInfoService_SendKubernetesNetworkFlowsServer) error
	mustEmbedUnimplementedKubernetesInfoServiceServer()
}

// UnimplementedKubernetesInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubernetesInfoServiceServer struct {
}

func (UnimplementedKubernetesInfoServiceServer) SendKubernetesResources(KubernetesInfoService_SendKubernetesResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendKubernetesResources not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) SendKubernetesNetworkFlows(KubernetesInfoService_SendKubernetesNetworkFlowsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendKubernetesNetworkFlows not implemented")
}
func (UnimplementedKubernetesInfoServiceServer) mustEmbedUnimplementedKubernetesInfoServiceServer() {}

// UnsafeKubernetesInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesInfoServiceServer will
// result in compilation errors.
type UnsafeKubernetesInfoServiceServer interface {
	mustEmbedUnimplementedKubernetesInfoServiceServer()
}

func RegisterKubernetesInfoServiceServer(s grpc.ServiceRegistrar, srv KubernetesInfoServiceServer) {
	s.RegisterService(&KubernetesInfoService_ServiceDesc, srv)
}

func _KubernetesInfoService_SendKubernetesResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).SendKubernetesResources(&kubernetesInfoServiceSendKubernetesResourcesServer{stream})
}

type KubernetesInfoService_SendKubernetesResourcesServer interface {
	Send(*SendKubernetesResourcesResponse) error
	Recv() (*SendKubernetesResourcesRequest, error)
	grpc.ServerStream
}

type kubernetesInfoServiceSendKubernetesResourcesServer struct {
	grpc.ServerStream
}

func (x *kubernetesInfoServiceSendKubernetesResourcesServer) Send(m *SendKubernetesResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kubernetesInfoServiceSendKubernetesResourcesServer) Recv() (*SendKubernetesResourcesRequest, error) {
	m := new(SendKubernetesResourcesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KubernetesInfoService_SendKubernetesNetworkFlows_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KubernetesInfoServiceServer).SendKubernetesNetworkFlows(&kubernetesInfoServiceSendKubernetesNetworkFlowsServer{stream})
}

type KubernetesInfoService_SendKubernetesNetworkFlowsServer interface {
	Send(*SendKubernetesNetworkFlowsResponse) error
	Recv() (*SendKubernetesNetworkFlowsRequest, error)
	grpc.ServerStream
}

type kubernetesInfoServiceSendKubernetesNetworkFlowsServer struct {
	grpc.ServerStream
}

func (x *kubernetesInfoServiceSendKubernetesNetworkFlowsServer) Send(m *SendKubernetesNetworkFlowsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kubernetesInfoServiceSendKubernetesNetworkFlowsServer) Recv() (*SendKubernetesNetworkFlowsRequest, error) {
	m := new(SendKubernetesNetworkFlowsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KubernetesInfoService_ServiceDesc is the grpc.ServiceDesc for KubernetesInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "illumio.cloud.k8scluster.v1.KubernetesInfoService",
	HandlerType: (*KubernetesInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendKubernetesResources",
			Handler:       _KubernetesInfoService_SendKubernetesResources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendKubernetesNetworkFlows",
			Handler:       _KubernetesInfoService_SendKubernetesNetworkFlows_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "illumio/cloud/k8scluster/v1/resource_config.proto",
}

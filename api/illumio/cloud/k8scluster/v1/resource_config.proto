// Copyright 2024 Illumio, Inc. All Rights Reserved.

syntax = "proto3";

package illumio.cloud.k8scluster.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/illumio/cloud-operator/api/illumio/cloud/k8scluster/v1";

// Metadata associated with a Kubernetes resource.
// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#objectmeta-v1-meta
message KubernetesObjectMetadata {
  map<string, string> annotations = 1;
  google.protobuf.Timestamp creation_timestamp = 2;
  string kind = 3;
  map<string, string> labels = 4;
  string name = 5;
  string namespace = 6;
  repeated KubernetesOwnerReference owner_references = 7;
  string resource_version = 8;
  string uid = 9;
}

// Information identifying an object owning a Kubernetes resource.
// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#ownerreference-v1-meta
message KubernetesOwnerReference {
  string api_version = 1;
  bool block_owner_deletion = 2;
  bool controller = 3;
  string kind = 4;
  string name = 5;
  string uid = 6;
}

// Metadata about the client operator and Kubernetes cluster.
// Sent as the first message in each KubernetesResources RPC request stream.
message KubernetesClusterMetadata {
  // Unique ID of the client operator's Kubernetes cluster.
  // This is the UID of the cluster's kube-system namespace, which is considered globally unique.
  string uid = 1;
  // Kubernetes version of the operator's cluster.
  // https://pkg.go.dev/k8s.io/client-go/discovery#DiscoveryClient.ServerVersion
  string kubernetes_version = 2;
  // Version of the operator. This version is following the Semver 2.0.0 format, e.g. "1.2.0".
  // https://semver.org/spec/v2.0.0.html
  string operator_version = 3;
}

// Message sent by the operator in a KubernetesResources request stream.
// Message subtypes are sent in this order in each stream:
// 1. (1) cluster_metadata, to identify the client cluster and operator.
// 2. (0+) resource_metadata, one message for each resource in the cluster.
// 3. (1) resource_snapshot_complete, to indicate the initial snapshot of all resources in the cluster is complete.
// 4. (0+) resource_mutation, one message for each resource creation/update/deletion in the cluster.
message SendKubernetesResourcesRequest {
  // Send any of these "request" messages that can contain any of the documented types.
  oneof request {
    // Metadata about the cluster and operator.
    KubernetesClusterMetadata cluster_metadata = 1;
    // Metadata about a Kubernetes resource in the cluster.
    KubernetesObjectMetadata resource_metadata = 2;
    // Indicates that all resource_metadata have been sent to report all the resources in the cluster in the initial snapshot.
    KubernetesResourceSnapshotComplete resource_snapshot_complete = 3;
    // A mutation to a Kubernetes resource in the cluster.
    KubernetesResourceMutation kubernetes_resource_mutation = 4;
  }
}

// Empty on purpose since this type is just expected when snapshot stream is done.
message KubernetesResourceSnapshotComplete {}

// Message sent to the operator in a KubernetesResources response stream.
message SendKubernetesResourcesResponse {
  // oneof response {
  //   // Until we are writing policies we shouldnt worry about what is returned here
  //   KubernetesAck ack = 1;
  // }
}

// A mutation to a Kubernetes resource in the cluster.
// Each mutation contains the full resource metadata after mutation (on create or update)
// or before mutation (on delete).
message KubernetesResourceMutation {
  // Send any of these "mutation" messages that can contain any of
  // The documented types
  oneof mutation {
    // Metadata of a newly created Kubernetes resource.
    KubernetesObjectMetadata create_resource = 1;
    // Metadata of an updated Kubernetes resource, after update.
    KubernetesObjectMetadata update_resource = 2;
    // Metadata of a deleted Kubernetes resource, before deletion.
    KubernetesObjectMetadata delete_resource = 3;
  }
}

enum LogLevels {
  LOG_LEVELS_INFO_UNSPECIFIED = 0;
  LOG_LEVELS_DEBUG = 1;
  LOG_LEVELS_ERROR = 2;
}

message KubernetesLogsRequest {
  string logs = 1;
}

message KubernetesLogsResponse {
  LogLevels level = 1;
}

// Syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
service KubernetesInfoService {
  // Continuously syncs the inventory of the Kubernetes resources in the cluster into CloudSecure.
  rpc SendKubernetesResources(stream SendKubernetesResourcesRequest) returns (stream SendKubernetesResourcesResponse);
  // Continuously syncs logs from operator and cluster
  rpc KubernetesLogs(stream KubernetesLogsRequest) returns (stream KubernetesLogsResponse);
}

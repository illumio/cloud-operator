name: Build, Deploy and Onboard Cloud Operator 

on:
    push:
      branches:
        - integration-end-to-end-onboarding-operator
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            VERSION=${{ github.ref_name }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@latest

      - name: Get Minikube IP
        id: get_minikube_ip
        run: |
          MINIKUBE_IP=$(minikube ip)
          minikube ip
          echo "MINIKUBE_IP=${MINIKUBE_IP}" >> $GITHUB_ENV

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
            version: "v3.16.4" # Specify the version you need

      - name: Package Helm chart
        run: |
            helm package ./cloud-operator -d .\

      - name: Install Helm chart and Deploy Operator and Run Tests
        env:
            ONBOARDING_CLIENT_ID: "client_id_1"
            ONBOARDING_CLIENT_SECRET: "client_secret_1"
            TLS_SKIP_VERIFY: true
            ONBOARDING_ENDPOINT: "https://${{ env.MINIKUBE_IP }}:50053/api/v1/k8s_cluster/onboard"
            TOKEN_ENDPOINT: "https://${{ env.MINIKUBE_IP }}:50053/api/v1/k8s_cluster/authenticate"
            
        run: |

            helm upgrade --install illumio cloud-operator-*.tgz \
            --namespace illumio-cloud \
            --create-namespace \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ github.ref_name }} \
            --set image.pullPolicy=Always \
            --set onboardingSecret.clientId=$ONBOARDING_CLIENT_ID \
            --set onboardingSecret.clientSecret=$ONBOARDING_CLIENT_SECRET \
            --set env.onboardingEndpoint=$ONBOARDING_ENDPOINT \
            --set env.tokenEndpoint=$TOKEN_ENDPOINT \
            --set env.tlsSkipVerify=$TLS_SKIP_VERIFY \
            --set falco.enabled=false
       
      - name: Wait for Kubernetes Pod to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=cloud-operator --timeout=600s -n illumio-cloud
          go test -v ./fakeserver/...
            # Fetch pod logs after it becomes ready

      - name: Exec into Pod and Test Connections
        run: |
          POD_NAME=$(kubectl get pods -n <namespace> -o jsonpath='{.items[0].metadata.name}')
          echo "Pod name: $POD_NAME"

          # Define the port where your fakeserver is running
          FAKESERVER_PORT=50053

          # List of IPs to test
          IP_ADDRESSES=(
            "127.0.0.1"               # Localhost (bound to 127.0.0.1 on the host)
            "0.0.0.0"                 # Bind to all interfaces (should allow connection from pod)
            "${{ env.MINIKUBE_IP }}"  # Minikube IP (e.g., 192.168.49.2)
          )

          # Loop through IPs and test connection using curl
          for IP in "${IP_ADDRESSES[@]}"; do
            echo "Testing connection to $IP:$FAKESERVER_PORT from pod..."

            # Exec into the pod and run curl command to test the connection
            kubectl exec -it $POD_NAME -n <namespace> -- curl -v http://$IP:$FAKESERVER_PORT || echo "Failed to connect to $IP:$FAKESERVER_PORT"
          done

                
      - name: Fetch Kubernetes Pod logs
        run: |
          POD_NAME=$(kubectl get pods -l app=cloud-operator -n illumio-cloud -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD_NAME -n illumio-cloud
        


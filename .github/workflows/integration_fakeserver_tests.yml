name: Build, Deploy and Onboard Cloud Operator

on:
  push:
    branches:
      - integration-end-to-end-onboarding-operator

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          build-args: |
            VERSION=${{ github.ref_name }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.24.0"
      
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Start Minikube
        run: |
          minikube start --driver=docker
  
      - name: Wait for Minikube to be ready
        run: |
          minikube kubectl -- get nodes
      - name: Get Docker Gateway IP
        id: get_docker_gateway_ip
        run: |
          # Extract Docker gateway IP address (the IP of docker0 interface)
          GATEWAY_IP=$(ip route | grep docker0 | awk '{print $3}')
          echo "GATEWAY_IP=$GATEWAY_IP" >> $GITHUB_ENV

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
            version: "v3.16.4"

      - name: Package Helm chart
        run: |
            helm package ./cloud-operator -d .

      - name: Install Helm chart and Deploy Operator
        env:
            ONBOARDING_CLIENT_ID: "client_id_1"
            ONBOARDING_CLIENT_SECRET: "client_secret_1"
            TLS_SKIP_VERIFY: true
            ONBOARDING_ENDPOINT: "http://${{env.GATEWAY_IP}}:50053/api/v1/k8s_cluster/onboard"
            TOKEN_ENDPOINT: "http://${{env.GATEWAY_IP}}:50053/api/v1/k8s_cluster/authenticate"
        run: |
            helm upgrade --install illumio cloud-operator-*.tgz \
            --namespace illumio-cloud \
            --create-namespace \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ github.ref_name }} \
            --set image.pullPolicy=Always \
            --set onboardingSecret.clientId=$ONBOARDING_CLIENT_ID \
            --set onboardingSecret.clientSecret=$ONBOARDING_CLIENT_SECRET \
            --set env.onboardingEndpoint=$ONBOARDING_ENDPOINT \
            --set env.tokenEndpoint=$TOKEN_ENDPOINT \
            --set env.tlsSkipVerify=$TLS_SKIP_VERIFY \
            --set falco.enabled=false

      - name: Wait for Kubernetes Pod to be Ready
        run: |
          # Wait for a few seconds to ensure the cluster and resources are fully up
          echo "Waiting for the cluster and resources to initialize..."
          sleep 10  # Adjust the sleep time as needed
      
          # Verify cluster status and list all pods across namespaces
          kubectl get pods -A
          
          # Wait for the cloud-operator pod to be ready
          kubectl wait --for=condition=ready pod -l app=cloud-operator --timeout=600s -n illumio-cloud
      
          # Run your test against the fake server
          go test -v ./fakeserver/...
          

      # - name: Exec into Pod and Test Connections
      #   run: |
      #     POD_NAME=$(kubectl get pods -n illumio-cloud -o jsonpath='{.items[0].metadata.name}')
      #     echo "Pod name: $POD_NAME"

      #     # Define the external server IPs and ports for both HTTP and gRPC servers
      #     EXTERNAL_IP="host.docker.internal"
      #     HTTP_PORT=50053
      #     GRPC_PORT=50051

      #     # Test connection to the HTTP fake server
      #     echo "Testing HTTP connection to $EXTERNAL_IP:$HTTP_PORT from pod..."
      #     kubectl exec -it $POD_NAME -n illumio-cloud -- curl -v http://$EXTERNAL_IP:$HTTP_PORT || echo "Failed to connect to HTTP server at $EXTERNAL_IP:$HTTP_PORT"

      #     # Test connection to the gRPC server
      #     echo "Testing gRPC connection to $EXTERNAL_IP:$GRPC_PORT from pod..."
      #     kubectl exec -it $POD_NAME -n illumio-cloud -- grpcurl -plaintext $EXTERNAL_IP:$GRPC_PORT list || echo "Failed to connect to gRPC server at $EXTERNAL_IP:$GRPC_PORT"

      - name: Fetch Kubernetes Pod logs
        run: |
          POD_NAME=$(kubectl get pods -l app=cloud-operator -n illumio-cloud -o jsonpath="{.items[0].metadata.name}")
          kubectl logs $POD_NAME -n illumio-cloud
